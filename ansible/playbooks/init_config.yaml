- name: Update and upgrade via apt
  hosts: orchestrator
  become: true

  tasks:
  - name: Update and upgrade OS via apt
    apt:
      update_cache: yes
      upgrade: yes

  - name: Install Opentofu
    snap:
      name: opentofu
      classic: yes
      channel: latest/stable

  - name: Configure hostname resolution via /etc/hosts
    lineinfile: 
      dest: /etc/hosts 
      regexp: '.*{{ item }}$' 
      line: "{{ hostvars[item].ansible_default_ipv4.address }} {{item}}" 
      state: present
      backup: yes
    when: hostvars[item].ansible_default_ipv4.address is defined
    with_items: "{{ groups['all'] }}"

- name: Apply Netplan configuration
  hosts: orchestrator
  become: true

  tasks:
    - name: Render Netplan template
      template:
        src: orchestrator-netplan.yaml.j2
        dest: /etc/netplan/01-netcfg.yaml

    - name: Apply Netplan connfig
      command: netplan apply

    - name: Pause 15s for network config to complete
      ansible.builtin.pause:
        seconds: 15

- name: Configure NAT and IP forwarding
  hosts: orchestrator
  become: true

  tasks:
    - name: Enable IP forwarding in sysctl
      sysctl:
        name: net.ipv4.ip_forward
        value: "1"
        state: present
        reload: yes

    - name: Install iptables-persistent
      apt:
        name: iptables-persistent
        state: present
        install_recommends: yes
        update_cache: yes

    - name: Add MASQUERADE rule for NAT
      iptables:
        table: nat
        chain: POSTROUTING
        out_interface: "{{ public_interface }}"
        jump: MASQUERADE
        state: present

    - name: Allow forwarding from internal to public
      iptables:
        chain: FORWARD
        in_interface: "{{ internal_interface }}"
        out_interface: "{{ public_interface }}"
        jump: ACCEPT
        state: present

    - name: Allow established connections back in
      iptables:
        chain: FORWARD
        in_interface: "{{ public_interface }}"
        out_interface: "{{ internal_interface }}"
        match: state
        ctstate: RELATED,ESTABLISHED
        jump: ACCEPT
        state: present

    - name: Save iptables rules persistently
      command: netfilter-persistent save
      notify:
        - Restart netfilter-persistent

  handlers:
    - name: Restart netfilter-persistent
      service:
        name: netfilter-persistent
        state: restarted

- name: SSH config
  hosts: orchestrator
  become: true

  vars:
    key_dir: /home/{{ ansible_user }}/.ssh
    private_key_path: "{{ key_dir }}/lab"
    public_key_path: "{{ key_dir }}/lab.pub"

  tasks:
    - name: Ensure .ssh directory exists
      file:
        path: "{{ key_dir }}"
        state: directory
        mode: '0700'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Import public key from Launchpad
      become_user: "{{ ansible_user }}"
      command: "ssh-import-id lp:{{ launchpad_user }}"
      register: ssh_import_result
      changed_when: "'already exists' not in ssh_import_result.stdout"

    - name: Generate secure SSH keypair
      openssh_keypair:
        path: "{{ private_key_path }}"
        type: rsa
        size: 4096
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'
        force: false

    - name: Set correct permissions on public key
      file:
        path: "{{ public_key_path }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'

- name: Install and configure LXD, create profile and container for MAAS
  hosts: orchestrator
  become: true

  tasks:
    - name: Ensure snapd is installed
      apt:
        name: snapd
        state: present
        update_cache: yes

    - name: Ensure LXD is installed via snap
      snap:
        name: lxd
        state: present
        classic: yes

    - name: Ensure LXD group exists
      group:
        name: lxd
        state: present

    - name: Add current user to lxd group
      user:
        name: "{{ ansible_user }}"
        groups: lxd
        append: yes

    - name: Render LXD config from Jinja2 template
      template:
        src: orchestrator-lxd-config.yaml.j2
        dest: /tmp/orchestrator-lxd-config.yaml

    - name: Initialize LXD with default settings (non-interactive)
      command: lxd init --preseed /tmp/orchestrator-lxd-config.yaml
      args:
        creates: /var/snap/lxd/common/lxd/database

    - name: Create LXD profile
      command: lxc profile create orchestrator-lxd-profile

    - name: Render LXD profile from Jinja2 template
      template:
        src: orchestrator-lxd-profile.yaml.j2
        dest: /tmp/orchestrator-lxd-profile.yaml

    - name: Apply LXD profile
      command: >
        lxc profile edit orchestrator-lxd-profile < /tmp/orchestrator-lxd-profile.yaml
      args:
        executable: /bin/bash

    - name: Launch container from profile
      command: >
        lxc launch ubuntu:22.04 maas -p orchestrator-lxd-profile
      args:
        creates: "/var/snap/lxd/common/lxd/containers/maas"

    - name: Copy scripts and configs into the container
      find:
        paths: ./scripts
        file_type: file
      register: files_to_copy

    - name: Push files into the container
      command: >
        tar czf scripts.gz ../scripts/
        lxc file push scripts.gz maas/root/
        lxc exec maas -- tar xf /root/scripts.gz

    - name: Push MAAS installation playbook into the container
      command: >
        lxc file push ./maas.yaml maas/root/maas.yaml
